readline 读到下一个换行符，会把读入内容做成一个字符串返回。一行最后的换行符作为字符串的最后字符。这样，如果读到一个空行，函数返回只包含换行符的串；
而文件读完时函数返回空串。
一般操作模式是：
inf = open(...)
while True:
    line = inf.readline()   #判断文件是否已经读完，空行表示假
    if not line:
        inf.close()
        break
        ...............      #处理一行文本
        
程序开始时，环境中只有内置名字空间和全局名字空间，全局名字空间作为当前名字空间。

按行处理是最常见的正文文件处理方式，将这种文件看作行的序列。
为了方便这种处理，Python把正文读文件也作为一种可迭代对象，允许直接用它作为for语句循环变量的数据源，每次迭代得到一行。这样，上述处理过程就可以改写为：

for line in inf :          #设infr的值是正文读文件对象
    ......line.....         #处理一行文本
inf.close()

f.readlines()与read类似，也是一次读入整个文件的内容，但它返回一个表，其中元素是一系列字符串，每个串是文件里的一个字符行。 调用这个函数时也可以提供
一个整数参数n,说明在本次操作中读入的行数限制。readlines同样维持每行最后的换行符。

需要注意read, 它将创建一个包含整个文件内容的字符串，如果文件很大，这个串就很长。

存在以下几种给当前名字空间中引进新定义的情况：
1.给没有定义的变量赋值，就是明确地把这个变量加入当前名字空间
2.用def定义函数，解释器将基于函数定义构造出一个函数对象，并将其关联于def语句中给定的函数名；
3.函数的参数了给函数执行时建立的局部名字空间引进新的定义；
4.用import语句导入模块，可以引入一个或多个定义。
5.把for语句头部看作给循环变量赋值，在for语句执行中，该变量可能经历一系列值。for语句结束后该变量仍然存在，并保持当时的关联值。此后这个变量可以像具有
同样作用域的其他哟几个个样使用。

求立方根的函数
def cbrt(x)
    if x == 0.0:
        return 0.0
    x1 = x
    while True:
        x2 = (2.0 * x1 + x / x1 / x1) / 3
        if abs((x2 - x1） / x1) < 0.001:
            return x2
        x1 = x2
        
 定义两个辅助函数来实现立方根函数
 def cbrt(x)
    def improve(x, guess):
        return (2.0 * guess + x / guess / guess) / 3
 
    def accept(guess, tmp)
        return abs((tmp - guess） / guess) < 1E-6
 
    if x == 0.0:
        return 0.0
    guess = x
    while True:
        tmp = improve(x, guess)
        if accept(guess, tmp):
            return tmp
        guess = tmp  
     
